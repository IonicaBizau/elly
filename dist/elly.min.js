(function (f) {
    if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f();
    } else if (typeof define === "function" && define.amd) {
        define([], f);
    } else {
        var g;if (typeof window !== "undefined") {
            g = window;
        } else if (typeof global !== "undefined") {
            g = global;
        } else if (typeof self !== "undefined") {
            g = self;
        } else {
            g = this;
        }g.elly = f();
    }
})(function () {
    var define, module, exports;return function e(t, n, r) {
        function s(o, u) {
            if (!n[o]) {
                if (!t[o]) {
                    var a = typeof require == "function" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
                }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
                    var n = t[o][1][e];return s(n ? n : e);
                }, l, l.exports, e, t, n, r);
            }return n[o].exports;
        }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) s(r[o]);return s;
    }({ 1: [function (require, module, exports) {
            "use strict";

            const iterateObj = require("iterate-object");

            /**
             * elly
             * A tiny library for creating and selecting DOM elements.
             *
             * @name elly
             * @function
             * @param {Number} a Param descrpition.
             * @param {Number} b Param descrpition.
             * @return {Number} Return description.
             */
            module.exports = function elly(input, contextOrAttributes) {
                if (typeof input === "string") {
                    if (input.charAt(0) === "<") {
                        input = document.createElement(input.slice(1, -1));
                        iterateObj(contextOrAttributes || {}, (name, value) => {

                            switch (name) {
                                case "text":
                                    input.textContent = value;
                                    return;
                                case "html":
                                    input.innerHTML = value;
                                    return;
                            }

                            input.setAttribute(name, value);
                        });
                        return input;
                    } else {
                        contextOrAttributes = contextOrAttributes || document;
                        return contextOrAttributes.querySelector(input);
                    }
                }
                return input;
            };
        }, { "iterate-object": 2 }], 2: [function (require, module, exports) {
            /**
             * iterateObject
             * Iterates an object. Note the object field order may differ.
             *
             * @name iterateObject
             * @function
             * @param {Object} obj The input object.
             * @param {Function} fn A function that will be called with the current value, field name and provided object.
             * @return {Function} The `iterateObject` function.
             */
            function iterateObject(obj, fn) {
                var i = 0,
                    keys = [];

                if (Array.isArray(obj)) {
                    for (; i < obj.length; ++i) {
                        if (fn(obj[i], i, obj) === false) {
                            break;
                        }
                    }
                } else if (typeof obj === "object" && obj !== null) {
                    keys = Object.keys(obj);
                    for (; i < keys.length; ++i) {
                        if (fn(obj[keys[i]], keys[i], obj) === false) {
                            break;
                        }
                    }
                }
            }

            module.exports = iterateObject;
        }, {}] }, {}, [1])(1);
});
