"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function select(str, context) {
    if (typeof str === "string") {
        return context.querySelectorAll(str);
    }
    return str;
}

var jQ = function jQ(elms) {
    _classCallCheck(this, jQ);

    this.elms = elms;
};

jQ.prototype.each = function each(fn) {
    for (var i = 0; i < elms.length; ++i) {
        fn(elms[i], i);
    }
    return this;
};
jQ.prototype.on = function on(event, fn) {
    return this.each(function (elm) {
        return elm.addEventListener(event, fn);
    });
};
jQ.prototype.click = function click() {
    return this.each(function (elm) {
        return elm.click();
    });
};
jQ.prototype.off = function off(event, fn) {
    return this.each(function (elm) {
        return elm.removeEventListener(event, fn);
    });
};
jQ.prototype.css = function css(prop, val) {
    return this.each(function (elm) {
        return elm.style[prop] = val;
    });
};
jQ.prototype.hide = function hide() {
    return this.css("display", "none");
};
jQ.prototype.show = function show() {
    return this.css("display", "block");
};
jQ.prototype.addClass = function addClass() {
    var _arguments = arguments;

    return this.each(function (elm) {
        return elm.classList.add.apply(elm.classList, _arguments);
    });
};
jQ.prototype.removeClass = function removeClass() {
    var _arguments2 = arguments;

    return this.each(function (elm) {
        return elm.classList.remove.apply(elm.classList, _arguments2);
    });
};
jQ.prototype.toggleClass = function toggleClass() {
    var _arguments3 = arguments;

    return this.each(function (elm) {
        return elm.classList.toggle.apply(elm.classList, _arguments3);
    });
};
jQ.prototype.attr = function attr(name, value) {
    return this.each(function (elm) {
        return elm.setAttribute(name, value);
    });
};
jQ.prototype.removeAttr = function removeAttr(name) {
    return this.each(function (elm) {
        return elm.removeAttribute(name, value);
    });
};

function jq(selector, context) {
    if (typeof selector === "function") {
        return $(window).on("DOMContentLoaded", selector);
    }
    var elms = [];
    context = (select(context, document) || [document])[0];
    elms = select(selector, context) || [];
    return new jQ(elms);
}

jq.fn = jQ.prototype;

module.exports = jq;
