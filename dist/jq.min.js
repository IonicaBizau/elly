(function () {
"use strict";

function select(str, context) {
    if (typeof str === "string") {
        if (context && context.constructor === jQ) {
            let first = context.elms[0];
            if (!first) {
                return [];
            }
            context = first;
        }
        context = context || document;
        return context.querySelectorAll(str);
    }
    return [str];
}

class jQ {
    constructor(elms) {
        this.elms = elms;
        this.length = this.elms.length;
    }
}

jQ.prototype.each = function each(fn) {
    var elms = this.elms,
        i = 0;

    for (; i < elms.length; ++i) {
        fn(elms[i], i);
    }

    return this;
};
jQ.prototype.on = function on(event, fn) {
    return this.each(elm => elm.addEventListener(event, fn));
};
jQ.prototype.click = function click() {
    return this.each(elm => elm.click());
};
jQ.prototype.off = function off(event, fn) {
    return this.each(elm => elm.removeEventListener(event, fn));
};
jQ.prototype.css = function css(prop, val) {
    return this.each(elm => elm.style[prop] = val);
};
jQ.prototype.hide = function hide() {
    return this.css("display", "none");
};
jQ.prototype.show = function show() {
    return this.css("display", "block");
};
jQ.prototype.addClass = function addClass() {
    return this.each(elm => elm.classList.add.apply(elm.classList, arguments));
};
jQ.prototype.removeClass = function removeClass() {
    return this.each(elm => elm.classList.remove.apply(elm.classList, arguments));
};
jQ.prototype.toggleClass = function toggleClass() {
    return this.each(elm => elm.classList.toggle.apply(elm.classList, arguments));
};
jQ.prototype.attr = function attr(name, value) {
    return this.each(elm => elm.setAttribute(name, value));
};
jQ.prototype.removeAttr = function removeAttr(name) {
    return this.each(elm => elm.removeAttribute(name, value));
};
jQ.prototype.text = function text(text) {
    return this.each(elm => elm.textContent = text);
};
jQ.prototype.html = function html(html) {
    return this.each(elm => elm.innerHTML = html);
};
jQ.prototype.eq = function eq(index) {
    var _jq = this.constructor;
    return new _jq([this.elms[index]]);
};
jQ.prototype.remove = function remove() {
    return this.each(elm => elm.remove());
};

function jq(selector, context) {
    if (typeof selector === "function") {
        return jq(window).on("DOMContentLoaded", selector);
    }
    return new jQ(select(selector, context) || []);
}

jq.fn = jQ.prototype;

if (typeof module === "object")
module.exports = jq;
else
window.$ = jq;
})();
